-------------------------------------------------------------------------------
MPICH DROP 50 - Release Notes
-------------------------------------------------------------------------------

CONTENTS:
--------
1. OVERVIEW
2. NEW FEATURES
3. RPM PACKAGE DETAILS
4. DISCLAIMER AND LEGAL INFORMATION

-------------------------------------------------------------------------------
1. OVERVIEW
-------------------------------------------------------------------------------

This is an evaluation release of mpich provided by Intel Corporation.

-------------------------------------------------------------------------------
2. NEW FEATURES
-------------------------------------------------------------------------------
Release 1
  1.  Fixed GPU RDMA
  2.  Added CVARs to change IPC read/write protocols and engine types
  3.  Fixed PMix shm bug with a missing byte count for '\0' in strlen count
  4.  RPMs are now compatible with PMix 4.2.2 and prte 3.0
Release 2
  1. Bug fix for cache with fast GPU memcpy
  2. Using immediate command lists in MPL layer
  3. Optimizing GPU pipeline for bidirectional communication
  4. Fix the call to zexMemGetIpcHandles
  5. Add CVAR to specify if using command queues in round robin or not
  6. Add dynamic expanding of event pools
  7. DAOS compilation bug fix
-------------------------------------------------------------------------------
2.1 DETAILS
-------------------------------------------------------------------------------

* Features merged from upstream mpich on Sep 12 2022
  1. pmi: fix MPIR_pmi_barrier using PMI2_KVS_Fence pmodels/mpich#6112
  2. init: set MPIR_CVAR_ENABLE_GPU to 0 if no device found pmodels/mpich#6116
  3. test: enhance runtests xml report pmodels/mpich#6111
  4. env: rewrite mpichvesion to use MPI_Get_library_version pmodels/mpich#6123
  5. util/mpir_pmi: use PMIX byte object type for put_ex pmodels/mpich#6115
  6. hydra: import libpmi pmodels/mpich#6107
  7. romio: change internal int count type to MPI_Aint pmodels/mpich#6114
  8. test/mpi: Remove runtime configure check for MPI_Publish_name pmodels/mpich#6134
  9. ADI: fix large count support for RMA and pt2pt pmodels/mpich#6125
  10. romio: actually set status in MPI_File_read_all pmodels/mpich#6117
  11. ROMIO: Preliminary support for MPI-4 large-count user-defined datatypes pmodels/mpich#6137
  12. stream/gpu: remove the synchronize requirement pmodels/mpich#6128
  13. ch4/ucx: Only set window base pointer when allocating pmodels/mpich#6140
  14. ROMIO: check error class instead of error string pmodels/mpich#4670
  15. binding/c: Update short descriptions for MPI_COMM_DUP[_WITH_INFO] pmodels/mpich#6144
  16. coll: fix large count conversion warnings pmodels/mpich#6126
  17. mpi4: Add large count MPI_STATUS_SET_ELEMENTS pmodels/mpich#6146
  18. debugger: fix typo in dll_mpich.c pmodels/mpich#6147
  19. stream: implement stream_workq pmodels/mpich#6062
  20. test/xfail: Enable cmsplit_type test on FreeBSD pmodels/mpich#6152
  21. test/mpi: Silence output during python3 check pmodels/mpich#6153
  22. mpir/pmi: Fix singleton init with PMI-2 and PMIx pmodels/mpich#6135
  23. romio: Dev romio visibility hint pmodels/mpich#6148
  24. ch4/ofi: Changes to get MPICH RMA working with CXI 2.0 pmodels/mpich#6127
  25. mpir/pmi: Add PMIx implementation of publish/lookup functionality pmodels/mpich#6130
  26. hydra: use struct PMIU_cmd from pmi_wire.h pmodels/mpich#6132
  27. Update gitignore pmodels/mpich#6151
  28. hydra/pmi: fix memory leak pmodels/mpich#6159
  29. Fix pmi warnings pmodels/mpich#6160
  30. test/configure: Improve runtime check for MPI_THREAD_MULTIPLE pmodels/mpich#6155
  31. datatype: Fix MPI_GET_ELEMENTS error case pmodels/mpich#6149
  32. hydra: refactor mpiexec pmi name service handlers pmodels/mpich#6156
  33. shm/ipc: IPC send takes syncflag and errflag from attr pmodels/mpich#6162 (reverted)
      * reverted reason: this PR will cause Bcast test to time-out on our pipeline at the GPU testing stage. We will investigate reasons and add it later.
  34. modules: Update libfabric to v1.15.2 pmodels/mpich#6163
  25. hydra: refactor pmi message handling pmodels/mpich#5860
  36. mpir: add safe type casting to int and MPI_Aint pmodels/mpich#6145

* Fixed GPU RDMA
  1. fix check to use fi_inject() with HMEM
  2. add buffer type check before registration
  3. enable HMEM capability for cxi: The capability is turned ON by default. But there is also a CVAR to control the enabling of GPU RDMA.
  4. setting the gpu-rdma threshold to zero: Setting the threshold to 0 for simplicity. Whenever HMEM is enabled by the user, all messages will use GPU RDMA.

* Using immediate command lists in MPL layer
  1. MPL_gpu_imemcpy has an option to use immediate command list
  2. add extra parameter for copying direction to MPIR_Localcopy_gpu
  3. add GPU copy direction parameter
  4. send and recv bypass yaksa for contiguous GPU buffers

* Optimizing GPU pipeline for bidirectional communication
  1. optimize GPU pipeline for bi-directional communication
  2. fix a bug in GPU pipelining that causes memory corruption
  3. always get pointer attributes for sender/recv buffers
-------------------------------------------------------------------------------
2.2 KNOWN ISSUES
-------------------------------------------------------------------------------

* Message transfers using multi-NIC striping fail with MPI_THREAD_MULTIPLE.

* Allowing compute engines as subdevices when defining ZE_AFFINITY_MASK is not
  currently supported. EngineInstancedSubDevices=0 is set in the modulefiles to
  ensure this feature is disabled.

-------------------------------------------------------------------------------
3. RPM PACKAGE DETAILS
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
3.1 MODULE FILES
-------------------------------------------------------------------------------
Installation of an RPM will also install a module file for that installation.
Module files are installed under /usr/mpi/modulefiles by default.
However, if an RPM is installed under a custom path using prefix, the module
file will be installed under <RPM_INSTALL_PREFIX>/modulefiles/.

A separate module file is provided to represent each unique combination of
compiler, ofi provider, flavor, build type, version, release, and the file
extension:
$RPM_INSTALL_PREFIX/modulefiles/mpich/<compiler>-<provider>-<build_type>-
<flavor>/<version>.<release>.<extension>

compiler: icc or gnu
- We support both compilers so that application developers have option to use
  either.
- Note: currently icc represents icx compiler.

provider: tcp, psm2

build_type: default, debug, or deterministic.
- default build is an optimized version. For installation, it will not append
  anything to the module file name. It is built for performance.
- debug build is built to help with debugging and does not provide good
  performance. It will install two versions of module files: debug and
  deterministic. The module file name will have an appended debug in it.
- deterministic build is configured to produce deterministic results for
  collectives and uses the debug build of MPICH. It uses the debug build and
  additional runtime configuration variables.

flavor: ats (represents the target gpu type)
- ats: no XPMEM, no DAOS, libfabric linked, level-zero linked, ATS-specific
  kernels generated

version and release: represent the drop release numbers

extension: each module file can have one of two extensions: .lua and .tcl.

Example of a module file:
/usr/mpi/modulefiles/mpich/gnu-sockets-debug-ats/42.1.lua

-------------------------------------------------------------------------------
3.2 DOCUMENTATION
-------------------------------------------------------------------------------
The documentation file is located at:
    <mpich installation path>/share/doc/mpich/TUNING_PARAMETERS

The release notes is also located at:
    <mpich installation path>/share/doc/mpich/RELEASE_NOTES

-------------------------------------------------------------------------------
3.3 DEBUGGING
-------------------------------------------------------------------------------
To generate debugging information in case of run failures with MPICH-OFI:

- You must run the application with the debug build provided in the drop. The
  log files will not get generated with the default build.
- Make a log directory in the run path. mkdir log.
- The following environment variable settings are recommended:
  export MPICH_DBG_FILENAME="log/dbg-%w-%d.log"
  export MPICH_DBG_CLASS=ALL
  export MPICH_DBG_LEVEL=VERBOSE

This causes each MPI process to generate a separate file, numbered by rank in
MPI_COMM_WORLD. If there are multiple worlds or multiple threads, the file
names will contain the "world number" and the "rank". You should see debug
files as log/dbg-0-0.log, ..., log/dbg-0-(num_ranks-1).log etc. This will give
necessary information for debugging.

Please also include the output of mpichversion.

For more detailed information, please visit:
https://wiki.mpich.org/mpich/index.php/Debug_Event_Logging

-------------------------------------------------------------------------------
4. DISCLAIMER AND LEGAL INFORMATION
-------------------------------------------------------------------------------

Intel Simplified Software License (Version February 2020)

---------------------------------------------

Use and Redistribution. You may use and redistribute the software
(the “Software”), without modification, provided the following conditions are
met:

* Redistributions must reproduce the above copyright notice and the following
  terms of use in the Software and in the documentation and/or other materials
  provided with the distribution.
* Neither the name of Intel nor the names of its suppliers may be used to
  endorse or promote products derived from this Software without specific prior
  written permission.
* No reverse engineering, decompilation, or disassembly of this Software is
  permitted.

Limited patent license. Intel grants you a world-wide, royalty-free,
non-exclusive license under patents it now or hereafter owns or controls to
make, have made, use, import, offer to sell and sell (“Utilize”) this Software,
but solely to the extent that any such patent is necessary to Utilize the
Software alone. The patent license shall not apply to any combinations which
include this software. No hardware per se is licensed hereunder.

Third party programs. The Software may contain Third Party Programs. “Third
Party Programs” are third party software, open source software or other Intel
software listed in the “third-party-programs.txt” or other similarly named text
file that is included with the Software. Third Party Programs, even if included
with the distribution of the Software, may be governed by separate license
terms, including without limitation, third party license terms, open source
software notices and terms, and/or other Intel software license terms. These
separate license terms may govern your use of the Third Party Programs.

DISCLAIMER. THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE
DISCLAIMED. THIS SOFTWARE IS NOT INTENDED FOR USE IN SYSTEMS OR APPLICATIONS
WHERE FAILURE OF THE SOFTWARE MAY CAUSE PERSONAL INJURY OR DEATH AND YOU AGREE
THAT YOU ARE FULLY RESPONSIBLE FOR ANY CLAIMS, COSTS, DAMAGES, EXPENSES, AND
ATTORNEYS’ FEES ARISING OUT OF ANY SUCH USE, EVEN IF ANY CLAIM ALLEGES THAT
INTEL WAS NEGLIGENT REGARDING THE DESIGN OR MANUFACTURE OF THE MATERIALS.

LIMITATION OF LIABILITY. IN NO EVENT WILL INTEL BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. YOU AGREE TO INDEMNIFY AND
HOLD INTEL HARMLESS AGAINST ANY CLAIMS AND EXPENSES RESULTING FROM YOUR USE OR
UNAUTHORIZED USE OF THE SOFTWARE.

No support. Intel may make changes to the Software, at any time without notice,
and is not obligated to support, update or provide training for the Software.

Termination. Intel may terminate your right to use the Software in the event of
your breach of this Agreement and you fail to cure the breach within a
reasonable period of time.

Feedback. Should you provide Intel with comments, modifications, corrections,
enhancements or other input (“Feedback”) related to the Software Intel will be
free to use, disclose, reproduce, license or otherwise distribute or exploit
the Feedback in its sole discretion without any obligations or restrictions of
any kind, including without limitation, intellectual property rights or
licensing obligations.

Compliance with laws. You agree to comply with all relevant laws and
regulations governing your use, transfer, import or export (or prohibition
thereof) of the Software.

Governing law. All disputes will be governed by the laws of the United States
of America and the State of Delaware without reference to conflict of law
principles and subject to the exclusive jurisdiction of the state or federal
courts sitting in the State of Delaware, and each party agrees that it submits
to the personal jurisdiction and venue of those courts and waives any
objections. The United Nations Convention on Contracts for the International
Sale of Goods (1980) is specifically excluded and will not apply to the
Software.

*Other names and brands may be claimed as the property of others.
